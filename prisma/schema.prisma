// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/// ==================== ENUMS ====================

enum Role {
  USER
  ADMIN
  SUPERADMIN
}

enum AdminPermission {
  CREATE
  UPDATE
  DELETE
  READ
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

/// ==================== MODELS ====================

model Auth {
  id        String   @id @default(cuid())
  emailId   String   @unique
  password  String
  role      Role
  createdAt DateTime @default(now())

  adminId      String?
  superAdminId String?
  userId       String?

  Admin      Admin?      @relation("AdminToAuth", fields: [adminId], references: [id], onDelete: Cascade)
  superadmin SuperAdmin? @relation(fields: [superAdminId], references: [id], onDelete: Cascade)
  user       User?       @relation(fields: [userId], references: [id], onDelete: Cascade)

  PasswordDetails PasswordDetails?
}

/// ----------- Super Admin -----------

model SuperAdmin {
  id              String   @id @default(cuid())
  title           String
  firstName       String
  middleName      String?
  lastName        String
  officialEmailId String   @unique
  personalEmailId String
  phNo            BigInt
  alternativePhNo BigInt?
  createdAt       DateTime @default(now())

  PersonalInfo       PersonalInfo?      @relation("SuperAdminToPersonalInfo")
  admins             Admin[]            @relation("SuperAdminCreatedAdmins")
  updatedPermissions AdminPermissions[] @relation("UpdatedBySuperAdmin")
  Auth               Auth[]
}

/// ----------- Admin -----------

model Admin {
  id              String   @id @default(cuid())
  title           String
  firstName       String
  middleName      String?
  lastName        String
  officialEmailId String   @unique
  personalEmailId String
  phNo            BigInt
  alternativePhNo BigInt?
  createdAt       DateTime @default(now())
  createdById     String

  createdBy          SuperAdmin             @relation("SuperAdminCreatedAdmins", fields: [createdById], references: [id])
  personalInfo       PersonalInfo?          @relation("AdminToPersonalInfo")
  permissions        AdminPermissions?      @relation("AdminToPermissions")
  Auth               Auth[]                 @relation("AdminToAuth")
  updatedDatasets    DatasetUpdateHistory[] @relation("UpdatedDatasets")
  updatedPermissions AdminPermissions[]     @relation("UpdatedByAdmin")
  birthInfo          BirthInfo[]
}

/// ----------- Admin Permissions -----------

model AdminPermissions {
  id                    String            @id @default(cuid())
  permissions           AdminPermission[]
  updatedBySuperAdminId String?
  updatedByAdminId      String?
  lastUpdatedAt         DateTime          @default(now())

  adminId String @unique
  admin   Admin  @relation("AdminToPermissions", fields: [adminId], references: [id], onDelete: Cascade)

  updatedBySuperAdmin SuperAdmin? @relation("UpdatedBySuperAdmin", fields: [updatedBySuperAdminId], references: [id])
  updatedByAdmin      Admin?      @relation("UpdatedByAdmin", fields: [updatedByAdminId], references: [id], onDelete: SetNull)
}

/// ----------- Personal Info -----------
model PersonalInfo {
  id          String   @id @default(cuid())
  address     String
  aadharUrl   String?
  panCardUrl  String?
  fatherName  String
  motherName  String
  gender      Gender
  dob         DateTime
  city        String
  state       String
  country     String
  pinCode     String
  nationality String

  adminId      String?     @unique
  superAdminId String?     @unique
  admin        Admin?      @relation("AdminToPersonalInfo", fields: [adminId], references: [id], onDelete: Cascade)
  superAdmin   SuperAdmin? @relation("SuperAdminToPersonalInfo", fields: [superAdminId], references: [id], onDelete: Cascade)
}

/// ----------- User -----------

model User {
  id    String @id @default(cuid())
  name  String
  email String @unique
  phNo  BigInt

  createdAt DateTime @default(now())

  datasets        DatasetLookup[]
  cart            Cart[]
  Auth            Auth[]
  UserProfileInfo UserProfileInfo?
}

model UserProfileInfo {
  id          String  @id @default(cuid())
  userId      String  @unique
  city        String?
  country     String?
  gender      Gender?
  occupation  String?
  institution String?
  user        User?   @relation(fields: [userId], references: [id])
}

/// ----------- Password Details -----------
model PasswordDetails {
  id                      String    @id @default(cuid())
  userId                  String    @unique
  password                String
  previousLogin           DateTime?
  updatePasswordTimeStamp DateTime

  auth Auth @relation(fields: [userId], references: [id])
}

/// ----------- Dataset -----------
model Dataset {
  id                String  @id @default(cuid())
  title             String
  primaryCategoryId String
  sourceId          String
  price             Float
  isPaid            Boolean
  license           String
  superType         String
  datasetUniqueId   String  @unique
  uploaded          Boolean @default(false)

  primaryCategory Category @relation("DatasetPrimaryCategory", fields: [primaryCategoryId], references: [id])
  source          Source   @relation("DatasetSource", fields: [sourceId], references: [id])

  aboutDatasetInfo     AboutDatasetInfo?
  birthInfo            BirthInfo?
  locationInfo         LocationInfo?
  securityInfo         SecurityInfo?
  DatasetUpdateHistory DatasetUpdateHistory[]
  DatasetLookup        DatasetLookup[]
  CategoryLookup       CategoryLookup[]
  Cart                 Cart[]
}

model AboutDatasetInfo {
  id          String @id @default(cuid())
  datasetId   String @unique
  overview    String
  description String
  dataQuality String

  dataset        Dataset         @relation(fields: [datasetId], references: [id], onDelete: Cascade)
  dataFormatInfo DataFormatInfo?
  features       Features[]
}

model DataFormatInfo {
  id               String           @id @default(cuid())
  aboutDatasetId   String           @unique
  rows             Int
  cols             Int
  fileFormat       String
  aboutDatasetInfo AboutDatasetInfo @relation(fields: [aboutDatasetId], references: [id], onDelete: Cascade)
}

model Features {
  id               String           @id @default(cuid())
  aboutId          String
  content          String
  AboutDatasetInfo AboutDatasetInfo @relation(fields: [aboutId], references: [id], onDelete: Cascade)
}

model BirthInfo {
  id                 String   @id @default(cuid())
  datasetId          String   @unique
  creatorAdminId     String
  createdAt          DateTime @default(now())
  lastUpdaterAdminId String
  lastUpdatedAt      DateTime @default(now())

  dataset Dataset @relation(fields: [datasetId], references: [id], onDelete: Cascade)
  Admin   Admin?  @relation(fields: [creatorAdminId], references: [id])
}

model LocationInfo {
  id        String @id @default(cuid())
  datasetId String @unique
  region    String
  country   String
  state     String
  city      String

  dataset Dataset @relation(fields: [datasetId], references: [id], onDelete: Cascade)
}

model SecurityInfo {
  id                      String @id @default(cuid())
  datasetId               String @unique
  currentEncryptionSecret String
  masterSecret            String

  dataset Dataset @relation(fields: [datasetId], references: [id], onDelete: Cascade)
}

/// ----------- Source -----------
model Source {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())

  // Updated relation name to avoid conflicts
  datasets Dataset[] @relation("DatasetSource")
}

/// ----------- Dataset Update History -----------
model DatasetUpdateHistory {
  id        String   @id @default(cuid())
  datasetId String
  adminId   String
  reason    String
  updatedAt DateTime @default(now())

  dataset Dataset @relation(fields: [datasetId], references: [id], onDelete: Cascade)
  admin   Admin   @relation("UpdatedDatasets", fields: [adminId], references: [id])
}

/// ----------- Dataset Lookup -----------

model DatasetLookup {
  id           String   @id @default(cuid())
  userId       String
  datasetId    String
  purchaseDate DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  dataset Dataset @relation(fields: [datasetId], references: [id], onDelete: Cascade)

  @@unique([userId, datasetId])
}

/// ----------- Category Lookup -----------

model CategoryLookup {
  id         String @id @default(cuid())
  datasetId  String
  categoryId String

  dataset  Dataset  @relation(fields: [datasetId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id])

  @@unique([datasetId, categoryId])
}

/// ----------- Category -----------

model Category {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  createdBy String

  // Updated relations
  primaryDatasets Dataset[]        @relation("DatasetPrimaryCategory")
  CategoryLookup  CategoryLookup[]
}

/// ----------- Cart -----------

model Cart {
  id        String   @id @default(cuid())
  userId    String
  datasetId String
  addedAt   DateTime @default(now())
  isInCart  Boolean

  user    User    @relation(fields: [userId], references: [id])
  dataset Dataset @relation(fields: [datasetId], references: [id], onDelete: Cascade)

  @@unique([userId, datasetId])
}
